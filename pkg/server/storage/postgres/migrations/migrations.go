// Code generated by go-bindata.
// sources:
// sql/001_add-initial-table.down.sql
// sql/001_add-initial-table.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_addInitialTableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x50\x2a\x2d\x4e\x2d\x52\xd2\x4b\xcd\x2b\xc9\x2c\xa9\x54\x70\x76\x0c\x76\x76\x74\x71\xb5\xe6\x82\x28\x09\x76\xf6\x70\xf5\x75\x84\xaa\xb1\x06\x04\x00\x00\xff\xff\xaf\x30\x1c\xef\x37\x00\x00\x00")

func _001_addInitialTableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_addInitialTableDownSql,
		"001_add-initial-table.down.sql",
	)
}

func _001_addInitialTableDownSql() (*asset, error) {
	bytes, err := _001_addInitialTableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_add-initial-table.down.sql", size: 55, mode: os.FileMode(420), modTime: time.Unix(1523798813, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_addInitialTableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xc1\x4a\xc4\x30\x18\x84\xef\x79\x8a\x61\x2f\x6d\xa0\xf8\x02\x7b\xfa\xed\xfe\xba\xc5\x6c\xaa\x69\xaa\xae\x1e\x96\xe2\x46\xc9\x25\x95\x34\x22\xeb\xd3\x4b\xd0\x56\x90\xbd\xce\x30\xdf\xcc\x88\xda\x30\x59\x46\x57\x6f\x79\x47\x58\x7d\x4c\x2e\xae\xd6\x62\x96\x2d\x5d\x2a\xfe\x55\x2f\x5c\x48\x3e\x9d\x50\x0a\x20\x8e\x9f\x07\x7f\x44\xc7\xa6\x21\x85\x5b\xd3\xec\xc8\xec\x71\xc3\xfb\x4a\x00\x29\x0e\x61\x1a\x5e\x92\x1f\xc3\xe1\xdd\x45\x3f\x1e\x61\x3b\xfb\x64\x48\x5f\x33\x74\x6b\xa1\x7b\xa5\xb0\xe1\x2b\xea\x95\x45\x9a\xd2\x57\x1c\xc2\x9b\x2b\x75\xfb\x50\xca\x0a\x85\x0f\xaf\x3e\xf8\x74\x2a\x2a\x14\xcf\xb2\x90\x99\x99\x17\xe4\xc6\x7b\x32\xf5\x96\xcc\x82\xc9\xde\xcf\xae\x73\xae\x90\x7f\x57\x7a\xdd\xdc\xf5\x8c\x46\x6f\xf8\x71\x8e\x64\x2a\x5a\xfd\xff\xe0\x02\xac\xe6\x5e\xb9\xfe\x0e\x00\x00\xff\xff\xca\x22\x23\xa4\x29\x01\x00\x00")

func _001_addInitialTableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_addInitialTableUpSql,
		"001_add-initial-table.up.sql",
	)
}

func _001_addInitialTableUpSql() (*asset, error) {
	bytes, err := _001_addInitialTableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_add-initial-table.up.sql", size: 297, mode: os.FileMode(420), modTime: time.Unix(1523762212, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_add-initial-table.down.sql": _001_addInitialTableDownSql,
	"001_add-initial-table.up.sql":   _001_addInitialTableUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_add-initial-table.down.sql": &bintree{_001_addInitialTableDownSql, map[string]*bintree{}},
	"001_add-initial-table.up.sql":   &bintree{_001_addInitialTableUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
