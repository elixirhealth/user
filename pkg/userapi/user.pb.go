// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/userapi/user.proto

/*
Package userapi is a generated protocol buffer package.

It is generated from these files:
	pkg/userapi/user.proto

It has these top-level messages:
	AddEntityRequest
	AddEntityResponse
	GetEntitiesRequest
	GetEntitiesResponse
*/
package userapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddEntityRequest struct {
	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	EntityId string `protobuf:"bytes,2,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
}

func (m *AddEntityRequest) Reset()                    { *m = AddEntityRequest{} }
func (m *AddEntityRequest) String() string            { return proto.CompactTextString(m) }
func (*AddEntityRequest) ProtoMessage()               {}
func (*AddEntityRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddEntityRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *AddEntityRequest) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

type AddEntityResponse struct {
}

func (m *AddEntityResponse) Reset()                    { *m = AddEntityResponse{} }
func (m *AddEntityResponse) String() string            { return proto.CompactTextString(m) }
func (*AddEntityResponse) ProtoMessage()               {}
func (*AddEntityResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetEntitiesRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *GetEntitiesRequest) Reset()                    { *m = GetEntitiesRequest{} }
func (m *GetEntitiesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEntitiesRequest) ProtoMessage()               {}
func (*GetEntitiesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetEntitiesRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type GetEntitiesResponse struct {
	EntityIds []string `protobuf:"bytes,1,rep,name=entity_ids,json=entityIds" json:"entity_ids,omitempty"`
}

func (m *GetEntitiesResponse) Reset()                    { *m = GetEntitiesResponse{} }
func (m *GetEntitiesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetEntitiesResponse) ProtoMessage()               {}
func (*GetEntitiesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetEntitiesResponse) GetEntityIds() []string {
	if m != nil {
		return m.EntityIds
	}
	return nil
}

func init() {
	proto.RegisterType((*AddEntityRequest)(nil), "userapi.AddEntityRequest")
	proto.RegisterType((*AddEntityResponse)(nil), "userapi.AddEntityResponse")
	proto.RegisterType((*GetEntitiesRequest)(nil), "userapi.GetEntitiesRequest")
	proto.RegisterType((*GetEntitiesResponse)(nil), "userapi.GetEntitiesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for User service

type UserClient interface {
	// AddEntity associates an entity ID with the given user ID.
	AddEntity(ctx context.Context, in *AddEntityRequest, opts ...grpc.CallOption) (*AddEntityResponse, error)
	// GetEntities returns a list of entity IDs associated with the given user ID.
	GetEntities(ctx context.Context, in *GetEntitiesRequest, opts ...grpc.CallOption) (*GetEntitiesResponse, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) AddEntity(ctx context.Context, in *AddEntityRequest, opts ...grpc.CallOption) (*AddEntityResponse, error) {
	out := new(AddEntityResponse)
	err := grpc.Invoke(ctx, "/userapi.User/AddEntity", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetEntities(ctx context.Context, in *GetEntitiesRequest, opts ...grpc.CallOption) (*GetEntitiesResponse, error) {
	out := new(GetEntitiesResponse)
	err := grpc.Invoke(ctx, "/userapi.User/GetEntities", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserServer interface {
	// AddEntity associates an entity ID with the given user ID.
	AddEntity(context.Context, *AddEntityRequest) (*AddEntityResponse, error)
	// GetEntities returns a list of entity IDs associated with the given user ID.
	GetEntities(context.Context, *GetEntitiesRequest) (*GetEntitiesResponse, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_AddEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userapi.User/AddEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddEntity(ctx, req.(*AddEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userapi.User/GetEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetEntities(ctx, req.(*GetEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "userapi.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddEntity",
			Handler:    _User_AddEntity_Handler,
		},
		{
			MethodName: "GetEntities",
			Handler:    _User_GetEntities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/userapi/user.proto",
}

func init() { proto.RegisterFile("pkg/userapi/user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0xc8, 0x4e, 0xd7,
	0x2f, 0x2d, 0x4e, 0x2d, 0x4a, 0x2c, 0xc8, 0x04, 0xd3, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42,
	0xec, 0x50, 0x31, 0x25, 0x0f, 0x2e, 0x01, 0xc7, 0x94, 0x14, 0xd7, 0xbc, 0x92, 0xcc, 0x92, 0xca,
	0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x71, 0x2e, 0xb0, 0x74, 0x7c, 0x66, 0x8a, 0x04,
	0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x1b, 0x88, 0xeb, 0x99, 0x22, 0x24, 0xcd, 0xc5, 0x99, 0x0a,
	0x56, 0x09, 0x92, 0x62, 0x02, 0x4b, 0x71, 0x40, 0x04, 0x3c, 0x53, 0x94, 0x84, 0xb9, 0x04, 0x91,
	0x4c, 0x2a, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x55, 0xd2, 0xe5, 0x12, 0x72, 0x4f, 0x2d, 0x01, 0x0b,
	0x66, 0xa6, 0x16, 0x13, 0xb2, 0x40, 0xc9, 0x84, 0x4b, 0x18, 0x45, 0x39, 0xc4, 0x14, 0x21, 0x59,
	0x2e, 0x2e, 0xb8, 0xbd, 0xc5, 0x12, 0x8c, 0x0a, 0xcc, 0x1a, 0x9c, 0x41, 0x9c, 0x30, 0x8b, 0x8b,
	0x8d, 0x66, 0x30, 0x72, 0xb1, 0x84, 0x16, 0xa7, 0x16, 0x09, 0xb9, 0x70, 0x71, 0xc2, 0x9d, 0x20,
	0x24, 0xa9, 0x07, 0xf5, 0xa3, 0x1e, 0xba, 0x07, 0xa5, 0xa4, 0xb0, 0x49, 0x41, 0x5d, 0xcc, 0x20,
	0xe4, 0xc5, 0xc5, 0x8d, 0xe4, 0x08, 0x21, 0x69, 0xb8, 0x62, 0x4c, 0x9f, 0x48, 0xc9, 0x60, 0x97,
	0x84, 0x99, 0x95, 0xc4, 0x06, 0x0e, 0x6e, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x66, 0xb1,
	0x99, 0x24, 0x88, 0x01, 0x00, 0x00,
}
